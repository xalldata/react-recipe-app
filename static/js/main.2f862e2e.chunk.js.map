{"version":3,"sources":["Recipes.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["Recipes","recipe","title","category","image","instructions","ingredients","className","src","alt","to","idMeal","meal","i","push","createIngredients","Details","match","useState","setRecipe","id","params","console","log","useEffect","fetchRecipe","a","fetch","oneRecipe","json","data","meals","map","rec","strMeal","strMealThumb","width","height","ingr","strInstructions","App","recipes","setRecipes","query","setQuery","search","setSearch","getRecipes","response","type","value","onChange","e","target","onClick","preventDefault","path","exact","render","props","key","strCategory","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mVAiDeA,EA7CC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,SAAwBC,GAAY,EAA1BC,aAA0B,EAAZD,OAGlDE,EAAc,GAgBlB,OACI,6BACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,gBACX,yBAAKC,IAAKJ,EAAOK,IAAI,MAEzB,yBAAKF,UAAU,WACX,wBAAIA,UAAU,gBAAgBL,EAA9B,MACA,wCAAcC,GACd,4BAAQI,UAAU,eACd,kBAAC,IAAD,CAAMG,GAAE,kBAAaT,EAAOU,QAAUJ,UAAU,mBAAhD,gBAzBpB,SAA2BK,GAE3B,IAAK,IAAIC,EAAI,EAAGA,GAAK,IACbD,EAAK,gBAAD,OAAiBC,IADJA,IAErBP,EAAYQ,KAAZ,UACOF,EAAK,gBAAD,OAAiBC,IAD5B,cACsCD,EAAK,aAAD,OAAcC,MAwB3CE,CAAkBd,OCgCxBe,G,MAjEC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACDC,mBAAS,IADR,mBACtBjB,EADsB,KACdkB,EADc,KAEzBC,EAAKH,EAAMI,OAAOD,GACtBE,QAAQC,IAAIN,EAAMI,OAAOD,IACvBI,qBAAU,WACNC,MAGL,IAEC,IAAMA,EAAW,uCAAG,8BAAAC,EAAA,sEACQC,MAAM,wDAAD,OAAyDP,IADtE,cACVQ,EADU,gBAEGA,EAAUC,OAFb,OAEVC,EAFU,OAGhBR,QAAQC,IAAI,MAAQO,EAAKC,MAAM,GAAGpB,QACpCQ,EAAUW,EAAKC,OACfT,QAAQC,IAAI,SAAWO,EAAKC,OALV,2CAAH,qDAQfzB,EAAc,GAgBlB,OACE,6BACGL,EAAO+B,KAAI,SAAAC,GAAG,OACb,yBAAK1B,UAAU,gBACb,wBAAIA,UAAU,eAAd,WAAqC0B,EAAIC,QAAzC,KACA,yBAAK1B,IAAKyB,EAAIE,aAAc1B,IAAI,aAAa2B,MAAM,QAAQC,OAAO,UApBxE,SAA2BzB,GAE3B,IAAK,IAAIC,EAAI,EAAGA,GAAK,IACbD,EAAK,gBAAD,OAAiBC,IADJA,IAErBP,EAAYQ,KAAZ,UACOF,EAAK,gBAAD,OAAiBC,IAD5B,cACsCD,EAAK,aAAD,OAAcC,MAiBvDE,CAAkBkB,GACpBX,QAAQC,IAAI,eAAiBjB,GAC1B,yBAAKC,UAAU,eACb,4CACCD,EAAY0B,KAAI,SAAAM,GAAI,OACnB,4BACE,4BAAKA,QAKX,6CACA,yBAAK/B,UAAU,gBACZ,2BAAI0B,EAAIM,gBAAR,a,OCuBEC,MA1Ef,WAAgB,IAAD,EAGiBtB,mBAAS,IAH1B,mBAGNuB,EAHM,KAGGC,EAHH,OAKaxB,mBAAS,IALtB,mBAKNyB,EALM,KAKCC,EALD,OAMe1B,mBAASyB,GANxB,mBAMNE,EANM,KAMEC,EANF,KAQbtB,qBAAU,WACRuB,IACAzB,QAAQC,IAAI,YACX,CAACoB,IAEJ,IAAMI,EAAU,uCAAG,8BAAArB,EAAA,sEACMC,MAAM,wDAAD,OAAyDgB,IADpE,cACXK,EADW,gBAEEA,EAASnB,OAFX,OAEXC,EAFW,OAGjBR,QAAQC,IAAIO,EAAKC,OACjBW,EAAWZ,EAAKC,OAJC,2CAAH,qDAiBhB,OACE,kBAAC,IAAD,KAEE,yBAAKxB,UAAU,OACZ,yBAAKA,UAAU,QACd,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SACb,kDAEF,0BAAMA,UAAU,eAAhB,IACE,2BACEA,UAAU,aACV0C,KAAK,OACLC,MAAOL,EACPM,SAxBO,SAAAC,GACnBN,EAAUM,EAAEC,OAAOH,UAyBT,4BAAQ3C,UAAU,gBAAgB0C,KAAK,SAASK,QArB1C,SAAAF,GAChBA,EAAEG,iBACFX,EAASC,KAoBG,kBAAC,IAAD,CAAMnC,GAAI,IAAKH,UAAU,OAAzB,cAKR,yBAAKA,UAAU,WAEhBkC,EAAUA,EAAQT,KAAI,SAAA/B,GAAM,OAC3B,kBAAC,IAAD,CACEuD,KAAK,IAAIC,OAAK,EACdC,OAAQ,SAACC,GAAD,OACN,kBAAC,EAAD,iBAAaA,EAAb,CAAoBC,IAAK3D,EAAOU,OAClCV,OAAUA,EACVC,MAAOD,EAAOiC,QACd/B,SAAUF,EAAO4D,YACjBxD,aAAcJ,EAAOsC,gBACrBnC,MAAOH,EAAOkC,sBAGT,8EAEL,kBAAC,IAAD,CAAOqB,KAAK,eAAeM,UAAW9C,OC/D5B+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjD,MACvB,2DCZNkD,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.2f862e2e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipes.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Recipes = ({ recipe, title, category, instructions, image }) => {\r\n    //createIngredients(recipe)\r\n\r\n    var ingredients = [];\r\n    function createIngredients(meal) {\r\n    // Get all ingredients from the object. Up to 20\r\n    for (let i = 1; i <= 20; i++) {\r\n        if (meal[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n            `${meal[`strIngredient${i}`]} - ${meal[`strMeasure${i}`]}`\r\n        );\r\n        } else {\r\n        // Stop if there are no more ingredients\r\n        break;\r\n        }\r\n    }\r\n    //console.log(\"dfhuj\" +ingredients)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"recipe\">\r\n                <div className=\"recipe-image\">\r\n                    <img src={image} alt=\"\"/>\r\n                </div>\r\n                <div className=\"details\">\r\n                    <h1 className=\"title-recipe\">{title}  </h1>\r\n                    <p>Category: {category}</p>\r\n                    <button className=\"view-recipe\">\r\n                        <Link to={`details/${recipe.idMeal}`} className=\"view-recipe-btn\" >View Recipe</Link>\r\n                        {/**<Link to={`/recipe/${recipe.idMeal`} >View Recipe</Link> */}\r\n                    </button>\r\n                    {/** <p>{instructions} </p> */}\r\n                    {createIngredients(recipe)}\r\n                    {/**<div>Ingredients : {ingredients.map(ingr => (\r\n                        <ul>\r\n                            <li>{ingr}</li>\r\n                        </ul>\r\n                ))} </div> */}\r\n                </div>\r\n            </div>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Recipes;","import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport './Details.css';\r\n\r\nconst Details = ({ match }) => {\r\n  const [recipe, setRecipe] = useState([]);\r\n  let id = match.params.id;\r\n  console.log(match.params.id);\r\n    useEffect(() => {\r\n        fetchRecipe();\r\n        //console.log(\"match = \" + match.params.id)\r\n        //console.log(\"match path= \" + match.path)\r\n}, [])\r\n\r\n    const fetchRecipe = async () => {\r\n        const oneRecipe = await fetch(`https://www.themealdb.com/api/json/v1/1/lookup.php?i=${id}`);\r\n        const data = await oneRecipe.json();\r\n        console.log(\"one\" + data.meals[0].idMeal);\r\n      setRecipe(data.meals);\r\n      console.log(\"Here 2\" + data.meals);\r\n    }\r\n\r\n  var ingredients = [];\r\n    function createIngredients(meal) {\r\n    // Get all ingredients from the object. Up to 20\r\n    for (let i = 1; i <= 20; i++) {\r\n        if (meal[`strIngredient${i}`]) {\r\n        ingredients.push(\r\n            `${meal[`strIngredient${i}`]} - ${meal[`strMeasure${i}`]}`\r\n        );\r\n        } else {\r\n        // Stop if there are no more ingredients\r\n        break;\r\n        }\r\n    }\r\n    //console.log(\"dfhuj\" +ingredients)\r\n    }\r\n  \r\n  return (\r\n    <div>\r\n      {recipe.map(rec => (\r\n        <div className=\"details-page\">\r\n          <h1 className=\"recipe-name\">Recipe: {rec.strMeal} </h1>\r\n          <img src={rec.strMealThumb} alt=\"Meal image\" width=\"600px\" height=\"500px\" />\r\n\r\n        {createIngredients(rec)}\r\n      {console.log(\"Ingredients \" + ingredients)}\r\n          <div className=\"ingredients\">\r\n            <h3>Ingredients:</h3>\r\n            {ingredients.map(ingr => (\r\n              <ul>\r\n                <li>{ingr}</li>\r\n              </ul>\r\n            ))}\r\n          </div>\r\n\r\n          <h3>Instructions:</h3>\r\n          <div className=\"instructions\">\r\n             <p>{rec.strInstructions} </p>\r\n         </div>\r\n      </div>\r\n      ))}\r\n      \r\n        \r\n      </div>\r\n      \r\n    )\r\n}\r\n\r\nexport default Details;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Recipes from './Recipes';\nimport Details from './Details';\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nfunction App() {\n\n  \n  const [recipes, setRecipes] = useState([]);\n  \n  const [query, setQuery] = useState('');\n  const [search, setSearch] = useState(query);\n\n  useEffect(() => {\n    getRecipes();\n    console.log(\"Effect\");\n  }, [query])\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${query}`);\n    const data = await response.json();\n    console.log(data.meals);\n    setRecipes(data.meals);\n  }\n\n  const handleChange = e => {\n    setSearch(e.target.value);\n    //console.log(\"handle Change\")\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  return (\n    <Router>\n      \n      <div className=\"App\">\n         <div className=\"hero\">\n          <div className=\"hero-content\">\n            <div className=\"title\">\n              <h1>Look for a recipe</h1>\n              </div>\n            <form className=\"search-form\"  > {/**onSubmit={getSearch} */}\n              <input\n                className=\"search-bar\"\n                type=\"text\"\n                value={search}\n                onChange={handleChange}\n              />\n              <button className=\"search-button\" type=\"submit\" onClick={getSearch} >\n                <Link to={'/'} className=\"btn\" >Search</Link>\n              </button>\n            </form>\n          </div>\n        </div>\n        <div className=\"recipes\">\n          \n      {recipes ? recipes.map(recipe => (  \n        <Route\n          path='/' exact\n          render={(props) => (\n            <Recipes {...props} key={recipe.idMeal}\n          recipe = {recipe}\n          title={recipe.strMeal}\n          category={recipe.strCategory}\n          instructions={recipe.strInstructions}\n          image={recipe.strMealThumb} />\n          )}\n            />\n          )) : <h1>Sorry, there's no recipe with under that name</h1>}\n        </div>\n          <Route path='/details/:id' component={Details} />             \n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}